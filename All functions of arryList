import java.util.*;   
import java.util.ArrayList;
public class Main
{
    public static void main(String args[])
    {
        List<Integer> ar=new ArrayList<>();
// 1.adding elements to Arraylist
        ar.add(3);
        ar.add(6);
        System.out.println("ar="+ar);
        System.out.println("value at index 1 of ar"+ar.get(1));
    List<Integer> ar3= new ArrayList<>();
    Collections.addAll(ar3,1,2,3,4,5); //initialising values all at once
    System.out.println("ar3="+ar3);
// 2.size of ArrayList
       System.out.println("Size of ar= "+ ar.size());
 //3.inserting elements
         ar.add(1,4);   // add(int index,value)
         ar.add(9);   //if index is not provided ,then element is added to the last
        System.out.println("Elements after inserting"+ar);
//4.adding other LIST OR SET to existing list
        ArrayList<Integer> ar2=new ArrayList<>();
        HashSet<Integer> set=new HashSet<>();
        ar2.addAll(ar);
        System.out.println("Elements of ar2 after using addAll with ar"+ar2);
        ar2.addAll(2,ar);   //we can also add the list from a specified index and it is inserted in between
        System.out.println("Elements after using addAll with index="+ar2);
        set.add(10);
        set.add(11);
        ar.addAll(set);
        System.out.println("adding elements of SET in ar="+ar);
//5.set  (updates element)
      System.out.println(ar2);
      ar2.set(3,88);
      System.out.println("list after using set() to ar2= :"+ar2);
      //add() inserts the element in between while set() updates the element
//6.removing all elements- removeAll()
     
       ArrayList<Integer> newar=new ArrayList<>();
       newar.add(3);
       newar.add(6);
       ar2.removeAll(newar);
       System.out.println("newar="+newar);
       System.out.println("removing elements of newar from ar2="+ar2);  // carefully see the output,all 3 and 6 are removed
//7.remove
      ar2.remove(Integer.valueOf(4));//deletes first occurence of 4
      // it also removes directly value incase of strings  . by default it takes the index
      System.out.println("Elements after deleting value 4 in ar2="+ar2);
//8.delete all elements of list
        ar2.clear();
        System.out.println(ar2);
        ar.removeAll(ar);
        System.out.println(ar);
//9.cloning
      ArrayList<Integer> number= new ArrayList<>(); //List<Integer> number=new ArrayList<>(); doesn't work here
      number.add(4);
      number.add(0);
    
      ArrayList<Integer> cloneNumber = (ArrayList<Integer>)number.clone();
      System.out.println(cloneNumber);
//10.contains() , indexOf() ,lastIndexOf() , isEmpty(), subList(), sort()
      List<Integer> ar5= new ArrayList<>();
      Collections.addAll(ar5,9,6,8,7,6);
      System.out.println("ar5 contains element 8="+ar5.contains(8));
      System.out.println("index of 8="+ar5.indexOf(8));
      System.out.println("index of 10="+ar5.indexOf(10));
      System.out.println("last index of 6="+ar5.lastIndexOf(6));
      
      System.out.println("is ar5 empty= "+ar5.isEmpty());
      System.out.println("sub list of ar5 "+ar5.subList(1,3));
      ar5.sort(Comparator.naturalOrder());
      System.out.println(ar5);
      ar5.sort(Comparator.reverseOrder());
      System.out.println(ar5);
      // OR
      Collections.sort(ar5);
      System.out.println(ar5);
      
//11.retainAll -common elements 
    // it works in hashset and arraylist as well
    List<Integer> ar6=new ArrayList<>(Arrays.asList(1,2,3,4,5));
    List<Integer> ar7=new ArrayList<>(Arrays.asList(6,7,8,4,5));
     ar6.retainAll(ar7);
    System.out.println("common elements "+ ar6);
    System.out.println("common elements "+ ar6.retainAll(ar7));
//12. contains all -check if 1 list contains the other element or not
    System.out.println(ar6);
    Collections.addAll(ar6,1,2,3);
    System.out.println(ar6);
    List<Integer> ar8=new ArrayList<>(Arrays.asList(1,2,3));
    boolean result1=ar6.containsAll(ar8);
    boolean result2=ar8.containsAll(ar6);
    System.out.println("checking if all elements are present "+result1);
    System.out.println("checking if all elements are present "+result2);
    System.out.println("checking if all elements are present "+ ar8.containsAll(ar6));
//13.removeRange is restricted and only can be used with Main
   //ar6.removeRange(1,3);
    List<String> ar9=new ArrayList<>(Arrays.asList("java","Python","c++","c+","5"));
   // ar9.removeRange(1, 3);
   //Or
     ar9.subList(1,3).clear();
   System.out.println(ar9);
//14.replaceAll- ir=t can update all the elements of list some condition
   System.out.println(ar6);
   ar6.replaceAll(e->e *3);
   System.out.println(ar6);
   ar9.replaceAll(e->e .toUpperCase());
   System.out.println(ar9);
//15.removeIf
   ar6.removeIf(e->(e%2==0));
    System.out.println(ar6);
   ar9.removeIf(e->e.contains("+"));
   System.out.println(ar9);
//16.forEach
    List<Integer> ar10=new ArrayList<>(Arrays.asList(1,2,3,4,5));
    ar10.forEach((e)->
    {
       e=e*e;
       System.out.print(e+" ");
    });
//17.iterator
  Iterator<Integer> iteratee=ar10.iterator();
  System.out.print("\n ArrayList ");
  while(iteratee.hasNext())
  {
      System.out.print(iteratee.next());
      System.out.print(",");
  }
    
    }
}
