//reverse using recursion and without using 2 stacks
// pushbottom() function is used
import java.util.*;
public class Main
{
    
    public static void pushbottom(int data,Stack<Integer> s)
    {
        if(s.isEmpty())
        {
            s.push(data);
            return;
        }
        int top=s.pop();
        pushbottom(data,s);
        s.push(top);
    }
    public static void reverse(Stack<Integer> s)
    {
        if(s.isEmpty())
        {
            return;
        }
        int top=s.pop();
        reverse(s);
        pushbottom(top,s);
    }
	public static void main(String[] args) {
	
		Stack<Integer> s=new Stack<>();
	
      s.push(1);
      s.push(2);
      s.push(3);
      //pushbottom(4,s);
		while(!s.isEmpty())
		{
		    System.out.println(s.pop());
		    
		}
	}
}


//reverse using iterative method and 2 stacks
import java.util.*;
public class Main
{
    
    public static void reverse(Stack<Integer> s,Stack<Integer> s2)
    {
        if(s.isEmpty())
        {return;}
        System.out.println(s.peek());
        s2.push(s.pop());
        reverse(s,s2);
    }
	public static void main(String[] args) {
	
		Stack<Integer> s=new Stack<>();
		Stack<Integer> s2=new Stack<>();
	
      s.push(1);
      s.push(2);
      s.push(3);
      reverse(s,s2);
		
		while(!s2.isEmpty())
		{
		    System.out.println(s2.pop());
		    
		}
	}
}
