//1.1 reverse using recursion without return type
  private void reverse(Node node) {
        if (node == tail) {
            head = tail;
            return;
        }
        reverse(node.next);
        tail.next = node;
        tail = node;
        tail.next = null;
    }

//1.2 reverse using recursion with return type
public Node reverse(Node node)
    {
        if(node==tail)
        {head=tail;  //*
            return tail;}
     reverse(node.next).next=node;
     
     tail=node;
     tail.next=null;  //this step is very important  ?
     return tail;
    }
//2. reverse using iterative method
class Solution
{
    //Function to reverse a linked list.
    Node reverseList(Node head)
    {
        // code here
        if(head.next==null)
        return head;
        Node prev=null;
        Node curr=head;
        Node Next=head.next;
        while(curr!=null)
        {
            
            curr.next=prev;
            prev=curr;
            curr=Next;
            if(Next!=null)
            Next=Next.next;
        }
        return prev;
    }
}
